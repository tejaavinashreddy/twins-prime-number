import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
class Result {

  

    public static int solve(int n, int m) {
   int size = m - n + 1;
        List<Integer> primeDivisors = sievePrimes(size);

        boolean[] primes = new boolean[size];
        Arrays.fill(primes, true);

        for (int primeDivisor : primeDivisors) {
            for (int i = n / primeDivisor * primeDivisor; i <= m; i += primeDivisor) {
                if (i >= n && i > primeDivisor) {
                    primes[i - n] = false;
                }
            }
        }

        int result = 0;
        for (int i = 0; i + 2 < primes.length; i++) {
            if (n + i >= 2 && primes[i] && primes[i + 2]) {
                result++;
            }
        }
        return result;
    }

    static List<Integer> sievePrimes(int limit) {
        boolean[] primes = new boolean[limit + 1];
        Arrays.fill(primes, true);

        List<Integer> result = new ArrayList<Integer>();
        for (int i = 2; i < primes.length; i++) {
            if (primes[i]) {
                result.add(i);

                for (long j = (long) i * i; j < primes.length; j += i) {
                    primes[(int) j] = false;
                }
            }
        }
        return result;
    }
}
    

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        int result = Result.solve(n, m);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

